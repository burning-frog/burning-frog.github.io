<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Panic-face&#39;s blog</title>
    <link>https://burning-frog.github.io/post/</link>
    <description>Recent content in Posts on Panic-face&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Apr 2019 16:11:16 +0800</lastBuildDate>
    
	<atom:link href="https://burning-frog.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【杂项】tar压缩解压</title>
      <link>https://burning-frog.github.io/post/tar_zip_unzip/</link>
      <pubDate>Tue, 30 Apr 2019 16:11:16 +0800</pubDate>
      
      <guid>https://burning-frog.github.io/post/tar_zip_unzip/</guid>
      <description>压缩
tar -cvf jpg.tar *.jpg #将目录里所有jpg文件打包成jpg.tar tar -czf jpg.tar.gz *.jpg #将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz tar -cjf jpg.tar.bz2 *.jpg #将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2 tar -cZf jpg.tar.Z *.jpg #将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z rar a jpg.rar *.jpg #rar格式的压缩，需要先下载rar for linux zip jpg.zip *.jpg #zip格式的压缩，需要先下载zip for linux  解压
tar -xvf file.tar #解压 tar包 tar -xzvf file.tar.gz #解压tar.gz tar -xjvf file.tar.bz2 #解压 tar.bz2 tar -xZvf file.tar.Z #解压tar.Z unrar e file.rar #解压rar unzip file.zip #解压zip  </description>
    </item>
    
    <item>
      <title>【杂项】Rust升级nighty升级失败处理</title>
      <link>https://burning-frog.github.io/post/rust_update_nighty_fail/</link>
      <pubDate>Tue, 30 Apr 2019 15:20:18 +0800</pubDate>
      
      <guid>https://burning-frog.github.io/post/rust_update_nighty_fail/</guid>
      <description>错误信息：component &amp;lsquo;rls&amp;rsquo; for target &amp;lsquo;x86_64-apple-darwin&amp;rsquo; is unavailable for download for channel &amp;lsquo;nightly&amp;rsquo;
rustup install nightly-2019-04-15  </description>
    </item>
    
    <item>
      <title>【杂项】iOS中使用rust</title>
      <link>https://burning-frog.github.io/post/rust_in_ios/</link>
      <pubDate>Tue, 30 Apr 2019 15:14:00 +0800</pubDate>
      
      <guid>https://burning-frog.github.io/post/rust_in_ios/</guid>
      <description>1.首先添加对应的architectures
rustup target add aarch64-apple-ios armv7-apple-ios armv7s-apple-ios x86_64-apple-ios i386-apple-ios  2.创建项目
mkdir rust-ios-example cd rust-ios-example cargo new rust --lib cd rust  3.编写rust
use std::os::raw::{c_char}; use std::ffi::{CString, CStr}; #[no_mangle] pub extern fn rust_hello(to: *const c_char) -&amp;gt; *mut c_char let c_str = unsafe{ CStr::from_ptr(to) } let recipient = match c_str.to_str() { Err(_) =&amp;gt; &amp;quot;there&amp;quot;, Ok(string) =&amp;gt; string, }; CString::new(&amp;quot;hello&amp;quot;.to_owned() + recipient).unwarp().into_raw() } #[no_mangle] pub extern fn rust_hello_free(s: *mut c_char) { unsafe { if s.</description>
    </item>
    
  </channel>
</rss>